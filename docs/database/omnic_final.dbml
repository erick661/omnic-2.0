// OMNIC 2.0 - Database Structure FINAL
// Compatible with dbdiagram.io
// Generated: 2024-10-27
// Version: 3.0 - Event-First + Multi-Channel + Sin Duplicación

Project omnic_final {
  database_type: 'PostgreSQL'
  Note: '''
    OMNIC 2.0 - Arquitectura Event-First Multi-Canal
    
    PRINCIPIOS DE DISEÑO:
    1. Event Sourcing para auditoría completa
    2. Tablas principales solo con datos esenciales inmutables  
    3. Sin duplicación de datos entre tablas
    4. Multi-canal polimórfico para comunicaciones
    5. Estados reconstruidos desde eventos
    6. Máxima simplicidad y escalabilidad
  '''
}

// =============================================
// EVENT SOURCING CORE
// =============================================

Table event_types {
  id bigserial [pk, increment]
  event_type varchar(100) [unique, not null]
  aggregate_type varchar(50) [not null]
  description text [not null]
  severity varchar(20) [default: 'info']
  schema_version int [default: 1]
  is_active boolean [default: true]
  created_at timestamp
  updated_at timestamp
  
  Note: '''
    Catálogo maestro de eventos del sistema
    Define estructura y validaciones para cada evento
    
    EJEMPLOS:
    - email.received, email.sent, email.status_changed
    - case.created, case.assigned, case.resolved
    - import.started, import.completed, import.failed
    - gmail.auth_success, gmail.auth_failed
  '''
}

Table events {
  id bigserial [pk, increment]
  
  // Identificación del evento
  event_type varchar(100) [not null] 
  aggregate_type varchar(50) [not null] 
  aggregate_id bigint // Nullable para eventos de sistema
  
  // Datos del evento
  event_data json [not null]
  event_version int [default: 1]
  
  // Metadatos
  triggered_by bigint
  triggered_at timestamp [not null, default: 'CURRENT_TIMESTAMP']
  ip_address varchar(45)
  user_agent text
  
  // Contexto
  severity varchar(20) [default: 'info'] // 'debug', 'info', 'warning', 'error', 'critical'
  process_name varchar(100) // 'email_import', 'gmail_auth', 'email_send'
  job_id varchar(255)
  correlation_id varchar(255)
  causation_id bigint
  
  // Procesamiento
  processed boolean [default: false]
  processed_at timestamp
  processed_by varchar(100)
  
  // Datos técnicos para errores
  error_code varchar(50)
  error_message text
  stack_trace text
  
  Indexes {
    (aggregate_type, aggregate_id, triggered_at)
    (event_type, triggered_at)
    (severity, triggered_at)
    triggered_by
    correlation_id
    process_name
    (processed, triggered_at)
  }
  
  Note: '''
    Event Store unificado - TODO pasa por aquí
    
    EJEMPLOS DE EVENT_DATA:
    
    EMAIL RECIBIDO:
    {
      "gmail_message_id": "17a1b2c3d4e5f6",
      "from_email": "cliente@empresa.com", 
      "subject": "Consulta urgente",
      "gmail_group_id": 5
    }
    
    ASIGNACIÓN:
    {
      "old_assigned_to": null,
      "new_assigned_to": 123,
      "assigned_by": 456,
      "assignment_notes": "RUT match found"
    }
    
    ERROR GMAIL API:
    {
      "error": "quota_exceeded",
      "quota_used": 250000,
      "quota_limit": 250000,
      "reset_time": "2024-10-28T00:00:00Z"
    }
  '''
}

// =============================================
// CORE ENTITIES - SOLO DATOS INMUTABLES
// =============================================

Table users {
  id bigserial [pk, increment]
  name varchar(255) [not null]
  email varchar(255) [unique, not null]
  password varchar(255) [not null]
  role varchar(255) [default: 'ejecutivo']
  is_active boolean [default: true]
  created_at timestamp
  updated_at timestamp
  
  Note: '''
    SOLO datos esenciales inmutables del usuario
    
    REMOVIDO (ahora eventos):
    - email_verified_at → user.email_verified
    - remember_token → user.login_token_generated  
    - email_alias, nickname → user.profile_updated
  '''
}

Table emails {
  id bigserial [pk, increment]
  
  // Identificadores únicos (inmutables)
  gmail_message_id varchar(255) [unique]
  gmail_thread_id varchar(255)
  
  // Datos básicos inmutables del mensaje
  direction varchar(20) [not null] // 'inbound', 'outbound'
  subject text
  from_email varchar(255) [not null]
  from_name varchar(255)
  to_email varchar(255) [not null]
  to_name varchar(255)
  cc_emails json
  bcc_emails json
  reply_to varchar(255)
  body_text text
  body_html text
  
  // Solo timestamps inmutables
  gmail_internal_date bigint // Timestamp real del email en Gmail
  created_at timestamp // Cuándo se creó el registro
  
  // Metadatos técnicos inmutables de Gmail
  gmail_headers json
  gmail_labels json
  gmail_size_estimate bigint
  gmail_snippet text
  raw_headers json
  message_references text
  in_reply_to varchar(255)
  
  // Adjuntos (inmutable)
  has_attachments boolean [default: false]
  
  // Relaciones básicas (inmutables)
  gmail_group_id bigint // Solo para inbound
  parent_email_id bigint // Para hilos/respuestas
  
  Indexes {
    gmail_message_id
    gmail_thread_id
    direction
    gmail_group_id
    parent_email_id
    created_at
    from_email
    to_email
  }
  
  Note: '''
    SOLO datos inmutables del email
    
    REMOVIDO (ahora eventos):
    - received_at → email.received
    - sent_at → email.sent  
    - updated_at → email.updated
    - status → email.status_changed
    - priority → (eliminado completamente)
    - category → (eliminado completamente) 
    - tags → (eliminado completamente)
    - assigned_to/by/at → email.assigned
    - processed_at/by → email.processed
    - marked_as_spam → email.marked_as_spam
    - bounced_at/reason/type → email.bounced
    - sync_status/last_sync_at → email.sync_*
    - case_id → se maneja via communications
    - rut_empleador/dv → van en el caso
    - reference_code_id → va en el caso
    
    El email es INMUTABLE una vez creado.
    Todo cambio de estado = evento.
  '''
}

Table cases {
  id bigserial [pk, increment]
  case_number varchar(20) [not null, unique]
  
  // Datos del empleador (inmutables una vez creados)
  employer_rut varchar(8)
  employer_dv varchar(1) 
  employer_name varchar(255)
  employer_phone varchar(20)
  employer_email varchar(255)
  
  // Origen (inmutable)
  origin_channel varchar(255) [not null] // 'email', 'phone', 'chat', 'whatsapp', 'sms'
  origin_communication_id bigint // ID de la comunicación origen
  
  // Referencias inmutables
  reference_code_id bigint // Código de referencia usado
  
  // Timestamps inmutables
  created_at timestamp
  
  Indexes {
    case_number
    employer_rut
    origin_channel
    reference_code_id
    created_at
  }
  
  Note: '''
    SOLO datos inmutables del caso
    
    REMOVIDO (ahora eventos):
    - status → case.status_changed
    - priority → case.priority_changed  
    - assigned_to/by/at → case.assigned
    - first_response_at → case.first_response_sent
    - last_activity_at → calculado desde eventos
    - resolved_at → case.resolved
    - updated_at → case.updated
    - internal_notes → case.note_added
    - auto_category → case.categorized
    - tags → case.tag_added/removed
    - response_time_hours → calculado desde eventos
    - resolution_time_hours → calculado desde eventos  
    - communication_count → calculado desde communications
    - campaign_id → case.campaign_associated
    
    El caso es inmutable en estructura.
    Todo cambio = evento.
  '''
}

Table gmail_groups {
  id bigserial [pk, increment]
  
  // Identificación del grupo
  group_email varchar(255) [not null, unique] // ejecutivo.juan.perez@orpro.cl, legal@orpro.cl
  group_name varchar(255) [not null] // "Juan Pérez", "Legal"
  group_type varchar(50) [not null] // 'personal', 'generic'
  
  // Asignación del ejecutivo responsable
  assigned_user_id bigint [not null] // Usuario que manejará estos emails
  
  // Control de importación
  import_enabled boolean [default: true]
  gmail_label varchar(255) // Label específico en Gmail (opcional)
  
  // Estado
  is_active boolean [default: true]
  
  // Timestamps
  created_at timestamp
  updated_at timestamp
  
  Indexes {
    group_email [unique]
    assigned_user_id
    group_type
    import_enabled
  }
  
  Note: '''
    GRUPOS GMAIL - Arquitectura Corporativa
    
    LÓGICA:
    1. Cuenta principal: comunicaciones@orpro.cl (única con licencia)
    2. Grupos ejecutivos: ejecutivo.nombre.apellido@orpro.cl
    3. Grupos genéricos: legal@orpro.cl, regulariza@orpro.cl
    4. TODOS tienen como único miembro: comunicaciones@orpro.cl
    5. OMNIC lee desde comunicaciones@orpro.cl y asigna por grupo
    
    EJEMPLOS:
    - group_email: "ejecutivo.juan.perez@orpro.cl"
    - group_name: "Juan Pérez" 
    - group_type: "personal"
    - assigned_user_id: 123 (ID del usuario Juan Pérez)
    
    - group_email: "legal@orpro.cl"
    - group_name: "Área Legal"
    - group_type: "generic"  
    - assigned_user_id: 456 (ID del jefe legal)
    
    CRUD COMPLETO:
    - Crear grupos nuevos
    - Asignar/reasignar ejecutivos
    - Habilitar/deshabilitar importación
    - Gestionar membresías (siempre comunicaciones@orpro.cl)
  '''
}

// =============================================
// GMAIL GROUPS MANAGEMENT
// =============================================

Table gmail_group_members {
  id bigserial [pk, increment]
  gmail_group_id bigint [not null]
  
  // Miembro del grupo (casi siempre comunicaciones@orpro.cl)
  member_email varchar(255) [not null] // comunicaciones@orpro.cl
  member_role varchar(50) [default: 'MEMBER'] // MEMBER, MANAGER, OWNER
  
  // Control
  is_active boolean [default: true]
  
  // Timestamps
  added_at timestamp [default: 'CURRENT_TIMESTAMP']
  updated_at timestamp
  
  Indexes {
    gmail_group_id
    member_email
    (gmail_group_id, member_email) [unique] // Un email por grupo
  }
  
  Note: '''
    MEMBRESÍAS DE GRUPOS GMAIL
    
    PROPÓSITO:
    - Gestionar quién pertenece a cada grupo
    - En 99% de casos: comunicaciones@orpro.cl
    - Permitir flexibilidad para casos especiales
    
    OPERACIONES CRUD:
    - Agregar comunicaciones@orpro.cl a grupos nuevos
    - Remover miembros (raramente usado)
    - Cambiar roles si es necesario
    - Auditoría de membresías
    
    EJEMPLO TÍPICO:
    - gmail_group_id: 1 (ejecutivo.juan.perez@orpro.cl)
    - member_email: "comunicaciones@orpro.cl"
    - member_role: "MEMBER"
  '''
}

// =============================================
// MULTI-CHANNEL COMMUNICATIONS
// =============================================

Table communications {
  id bigserial [pk, increment]
  case_id bigint [not null]
  
  // Polimorfismo - CLAVE DE LA ARQUITECTURA
  channel_type varchar(50) [not null] // 'email', 'phone', 'whatsapp', 'sms', 'webchat'
  channel_id bigint [not null] // ID en la tabla específica del canal
  
  // Datos comunes a todos los canales
  direction varchar(20) [not null] // 'inbound', 'outbound'
  subject varchar(500) // Para canales que lo soportan (email)
  content_preview text // Preview del contenido (primeros 200 chars)
  
  // Timestamps comunes (inmutables)
  received_at timestamp // Para inbound
  sent_at timestamp // Para outbound
  created_at timestamp
  
  // Referencias comunes
  in_reply_to bigint // Otra comunicación de este caso
  reference_code varchar(50) // Código usado en esta comunicación
  
  Indexes {
    case_id
    (channel_type, channel_id) // Índice compuesto para polimorfismo
    direction
    received_at
    sent_at
    in_reply_to
  }
  
  Note: '''
    Tabla POLIMÓRFICA - CORAZÓN DEL MULTI-CANAL
    
    MAPEO DE CANALES:
    - channel_type='email' → channel_id=emails.id
    - channel_type='phone' → channel_id=phone_calls.id  
    - channel_type='whatsapp' → channel_id=whatsapp_messages.id
    - channel_type='sms' → channel_id=sms_messages.id
    - channel_type='webchat' → channel_id=webchat_messages.id
    
    VENTAJAS CLAVE:
    1. Un caso puede tener comunicaciones multi-canal
    2. Timeline cronológico unificado
    3. Métricas cross-canal por caso
    4. Queries simples para obtener todas las comunicaciones
    
    REMOVIDO (ahora eventos):
    - status → communication.status_changed
    - processed_at/by → communication.processed
  '''
}

// =============================================
// TABLAS ESPECÍFICAS POR CANAL
// =============================================

Table phone_calls {
  id bigserial [pk, increment]
  phone_number varchar(20) [not null]
  direction varchar(20) [not null] // 'inbound', 'outbound'
  
  // Datos específicos de llamada (inmutables)
  call_duration_seconds int
  caller_id varchar(100)
  
  // Contenido (inmutable una vez finalizado)
  call_summary text
  notes text
  
  // Timestamps inmutables
  started_at timestamp
  ended_at timestamp
  created_at timestamp
  
  Note: '''
    Llamadas telefónicas - datos inmutables
    
    REMOVIDO (eventos):
    - call_status → phone.call_completed/failed
    - recording_url → phone.recording_saved
    - follow_up_required → phone.follow_up_scheduled
  '''
}

Table whatsapp_messages {
  id bigserial [pk, increment]
  phone_number varchar(20) [not null]
  direction varchar(20) [not null]
  
  // Identificadores WhatsApp (inmutables)
  whatsapp_id varchar(255) // ID del mensaje en WhatsApp
  conversation_id varchar(255)
  
  // Contenido (inmutable)
  message_type varchar(50) // 'text', 'image', 'document', 'audio', 'video'
  content_text text
  media_url varchar(500)
  media_filename varchar(255)
  media_mime_type varchar(100)
  
  // Timestamps inmutables
  created_at timestamp
  
  Note: '''
    Mensajes WhatsApp - datos inmutables
    
    REMOVIDO (eventos):
    - delivery_status → whatsapp.delivered/read/failed
    - sent_at/delivered_at/read_at → eventos específicos
  '''
}

Table sms_messages {
  id bigserial [pk, increment]
  phone_number varchar(20) [not null]
  direction varchar(20) [not null]
  
  // Contenido SMS (inmutable)
  content_text text [not null]
  
  // Metadatos SMS (inmutables)
  sms_provider varchar(50) // 'twilio', 'aws_sns', etc
  provider_message_id varchar(255)
  
  // Timestamps inmutables
  created_at timestamp
  
  Note: '''
    Mensajes SMS - datos inmutables
    
    REMOVIDO (eventos):
    - delivery_status → sms.delivered/failed
    - sent_at/delivered_at → eventos específicos
  '''
}

Table webchat_messages {
  id bigserial [pk, increment]
  
  // Identificación del visitante (inmutable)
  visitor_id varchar(255) [not null] // Cookie/session del visitante
  visitor_name varchar(255)
  visitor_email varchar(255)
  
  direction varchar(20) [not null]
  
  // Contenido (inmutable)
  message_text text [not null]
  message_type varchar(50) [default: 'text'] // 'text', 'file', 'emoji'
  
  // Metadatos del chat (inmutables)
  session_id varchar(255)
  page_url varchar(500) // Página donde se inició el chat
  user_agent text
  
  // Timestamps inmutables
  created_at timestamp
  
  Note: '''
    Chat web - datos inmutables
    
    REMOVIDO (eventos):
    - sent_at → webchat.message_sent
    - session_ended → webchat.session_closed
  '''
}

// =============================================
// EMAIL QUEUE - ULTRA SIMPLIFICADO
// =============================================

Table email_queue {
  id bigserial [pk, increment]
  
  // SOLO referencia - SIN duplicación
  email_id bigint [not null] // Referencia directa a emails
  
  // Control de envío mínimo
  status varchar(50) [default: 'queued'] // queued, processing, sent, failed, cancelled
  scheduled_at timestamp [default: 'CURRENT_TIMESTAMP']
  attempts int [default: 0]
  max_attempts int [default: 3]
  
  created_at timestamp
  
  Indexes {
    email_id
    status
    scheduled_at
  }
  
  Note: '''
    Cola ultra-simplificada - SIN duplicación
    
    TODOS los datos del email están en tabla emails:
    - to_email, subject, body_html → emails.*
    - template_id → via eventos email.template_applied
    - case_id → via communications
    - attachments → email_attachments
    
    Esta tabla SOLO controla el estado de envío.
    
    FLUJO:
    1. Email creado en emails (direction='outbound')
    2. Agregado a email_queue
    3. Job procesa y envía
    4. Estados via eventos
    5. Queue se limpia tras envío exitoso
    
    REMOVIDO (eventos):
    - queued_at/processing_at/sent_at/failed_at → eventos
    - gmail_message_id → evento email_queue.sent
    - error_message → evento email_queue.failed
  '''
}

// =============================================
// ATTACHMENTS Y REFERENCIAS
// =============================================

Table email_attachments {
  id bigserial [pk, increment]
  email_id bigint [not null]
  
  // Datos inmutables del archivo
  original_filename varchar(255) [not null]
  mime_type varchar(100) [not null]
  file_size bigint [not null]
  file_path varchar(500) [not null]
  
  // Drive (inmutable una vez subido)
  drive_file_id varchar(255)
  
  created_at timestamp
  
  Indexes {
    email_id
    drive_file_id
  }
  
  Note: '''
    Adjuntos - SOLO datos inmutables
    
    REMOVIDO (eventos):
    - stored_filename → attachment.processed
    - drive_path/folder_id → attachment.uploaded_to_drive
    - status → attachment.upload_success/failed
    - uploaded_at → attachment.uploaded
    - error_message → attachment.upload_failed
  '''
}

Table contacts {
  id bigserial [pk, increment]
  email varchar(255) [not null, unique]
  first_name varchar(255)
  last_name varchar(255)
  company varchar(255)
  rut_empleador varchar(8)
  dv_empleador varchar(1)
  phone varchar(50)
  is_active boolean [default: true]
  created_at timestamp
  updated_at timestamp
  
  Indexes {
    email
    rut_empleador
  }
  
  Note: 'Contactos básicos del sistema'
}

Table reference_codes {
  id bigserial [pk, increment]
  rut_empleador varchar(8) [not null]
  dv_empleador varchar(1) [not null]
  producto varchar(50) [not null]
  code_hash varchar(255) [not null]
  assigned_user_id bigint [not null]
  created_at timestamp
  
  Indexes {
    code_hash [unique]
    rut_empleador
    assigned_user_id
  }
  
  Note: '''
    Códigos inmutables una vez creados
    
    REMOVIDO (eventos):
    - case_id → reference_code.used_for_case
    - usage_count → calculado desde eventos
    - last_used_at → último evento reference_code.used
  '''
}

// =============================================
// TEMPLATES Y CONFIGURACIÓN
// =============================================

Table email_templates {
  id bigserial [pk, increment]
  name varchar(255) [not null]
  subject varchar(255) [not null]
  body_html text
  body_text text
  variables json
  is_active boolean [default: true]
  created_by bigint
  created_at timestamp
  updated_at timestamp
  
  Note: 'Plantillas de emails'
}

Table system_config {
  id bigserial [pk, increment]
  key varchar(255) [not null, unique]
  value text
  description text
  updated_at timestamp [default: 'CURRENT_TIMESTAMP']
  
  Note: 'Configuración del sistema'
}

// =============================================
// LARAVEL SYSTEM (Mínimo necesario)
// =============================================

Table migrations {
  id int [pk, increment]
  migration varchar(255) [not null]
  batch int [not null]
}

Table failed_jobs {
  id bigserial [pk, increment]
  uuid varchar(255) [unique, not null]
  connection text [not null]
  queue text [not null]
  payload text [not null]
  exception text [not null]
  failed_at timestamp [default: 'CURRENT_TIMESTAMP']
}

Table jobs {
  id bigserial [pk, increment]
  queue varchar(255) [not null]
  payload text [not null]
  attempts smallint [not null]
  reserved_at int
  available_at int [not null]
  created_at int [not null]
}

Table sessions {
  id varchar(255) [pk]
  user_id bigint
  ip_address varchar(45)
  user_agent text
  payload text [not null]
  last_activity int [not null]
}

// =============================================
// FOREIGN KEY RELATIONSHIPS
// =============================================

// Event relationships
Ref: events.triggered_by > users.id
Ref: events.causation_id > events.id
Ref: events.event_type > event_types.event_type

// Core entity relationships
Ref: emails.gmail_group_id > gmail_groups.id
Ref: emails.parent_email_id > emails.id

Ref: cases.reference_code_id > reference_codes.id

// Gmail groups management
Ref: gmail_groups.assigned_user_id > users.id
Ref: gmail_group_members.gmail_group_id > gmail_groups.id

// Multi-channel communications (polimórfico)
Ref: communications.case_id > cases.id
Ref: communications.in_reply_to > communications.id
// Nota: Las relaciones polimórficas (communications → emails/phone_calls/etc) 
// no se pueden expresar directamente en DBML pero Laravel las manejará

// Email system
Ref: email_queue.email_id > emails.id
Ref: email_attachments.email_id > emails.id

// Reference data
Ref: reference_codes.assigned_user_id > users.id
Ref: email_templates.created_by > users.id
Ref: sessions.user_id > users.id

// =============================================
// TABLE GROUPS FOR VISUALIZATION
// =============================================

TableGroup "Event Sourcing" {
  event_types
  events
}

TableGroup "Core Entities" {
  users
  emails
  cases
}

TableGroup "Gmail Management" {
  gmail_groups
  gmail_group_members
}

TableGroup "Multi-Channel Communications" {
  communications
  phone_calls
  whatsapp_messages
  sms_messages
  webchat_messages
}

TableGroup "Email Processing" {
  email_queue
  email_attachments
  email_templates
}

TableGroup "Reference Data" {
  contacts
  reference_codes
  system_config
}

TableGroup "Laravel System" {
  migrations
  failed_jobs
  jobs
  sessions
}

// =============================================
// ARQUITECTURA Y FILOSOFÍA
// =============================================

/*
PRINCIPIOS FUNDAMENTALES:

1. EVENT-FIRST ARCHITECTURE:
   - Toda mutación = evento
   - Estado actual = agregación de eventos
   - Auditoría completa automática
   - Time travel capabilities

2. INMUTABILIDAD:
   - Tablas principales = solo datos que no cambian
   - Una vez creado el registro, no se modifica
   - Cambios = nuevos eventos

3. ZERO DUPLICATION:
   - Un dato vive en UN solo lugar
   - Referencias por ID, no por copia
   - email_queue solo referencia emails.id

4. POLIMORFISMO MULTI-CANAL:
   - communications unifica todos los canales
   - Un caso puede tener email + llamada + WhatsApp
   - Timeline cronológico cross-canal

5. ESCALABILIDAD:
   - Agregar nuevo evento = INSERT en event_types
   - Agregar nuevo canal = nueva tabla + actualizar enum
   - Sin cambios de schema para nuevas funcionalidades

EJEMPLOS DE QUERIES FRECUENTES:

-- Estado actual de un email:
SELECT event_data->>'new_status' as current_status
FROM events 
WHERE aggregate_type='email' 
  AND aggregate_id=123 
  AND event_type='email.status_changed'
ORDER BY triggered_at DESC 
LIMIT 1;

-- Timeline completo de un caso:
SELECT c.*, 
  CASE c.channel_type
    WHEN 'email' THEN e.subject
    WHEN 'phone' THEN p.call_summary
    WHEN 'whatsapp' THEN w.content_text
  END as content
FROM communications c
LEFT JOIN emails e ON c.channel_type='email' AND c.channel_id=e.id
LEFT JOIN phone_calls p ON c.channel_type='phone' AND c.channel_id=p.id
LEFT JOIN whatsapp_messages w ON c.channel_type='whatsapp' AND c.channel_id=w.id
WHERE c.case_id = 456
ORDER BY COALESCE(c.received_at, c.sent_at);

-- Emails en cola para envío:
SELECT e.subject, e.to_email, q.attempts, q.scheduled_at
FROM email_queue q
JOIN emails e ON q.email_id = e.id
WHERE q.status = 'queued'
ORDER BY q.scheduled_at;

-- Errores recientes del sistema:
SELECT event_type, error_message, triggered_at
FROM events
WHERE severity IN ('error', 'critical')
  AND triggered_at > NOW() - INTERVAL '1 hour'
ORDER BY triggered_at DESC;

ELIMINADO COMPLETAMENTE:
- user_roles: → eventos user.role_changed
- oauth_tokens: → eventos gmail.auth_*
- case_metrics: → calculado desde eventos
- contact_lists/members: → eventos campaign.*
- campaigns: → eventos campaign.*
- phone_communications: → unificado en phone_calls
- cache/locks: → Laravel nativo
- password_reset_tokens: → Laravel nativo
- job_batches: → simplificado

TOTAL: 16 tablas principales vs 29 originales = 45% reducción
*/